{
    "collab_server" : "",
    "contents" : "#' Bi-clustering analysis to predicted the regulated patients and genes\n#'\n#' @param mx an expression matrix\n#' @param regulators a vector for the index or gene name of regulators\n#' @param min.ges the minimum number of regulated genes\n#' @param min.pas the minimum number of regulated patients\n#' @param cutoff the cutoff value of Spearman's correlation\n#' @param cores the number of CPU cores\n#' @param max.ges the maximum number of regulated genes\n#'\n#' @useDynLib bireg\n#'\n#' @author Guofeng Meng\n#' @references\n#'\n#' @import parallel\n#' @import Rcpp\n#'\n#'\n#' @details Use a cpp program to do bi-clustering analysis to predict the genes and patients regulated by regulators\n#'\n#' @return A bca class object.\n#'\n#' @examples\n#' res <- bca(expr, regulators, min.pas=50, min.ges=10, max.ges=60)\n#'\n#' @export\n\n\nbca <- function( mx, regulators, min.pas=100, min.ges=50, cutoff=0.85, cores=1, max.ges=1000){\n  print(class(mx))\n  expr=as.matrix(mx)\n  patients=colnames(mx)\n  genes=row.names(mx)\n  print(1)\n  tfloc=regulators;\n  if(!is.numeric(regulators))\n    tfloc=which(genes %in% regulators)\n  print(1)\n  output=bcacpp(mx, tfloc, c(min.ges,max.ges, min.pas, 10, cutoff, cores))\n  print(2)\n  res=.transform(output)\n  print(3)\n  res[[\"para\"]] <- list(patients=patients, genes=genes, tfloc=tfloc, min.pas=min.pas, min.ges=min.ges, cutoff=cutoff, cores=cores, max.ges=max.ges)\n  attr(res, \"class\") <- \"bca\"\n  return(res)\n}\n\n#' Extract regulated patients and genes\n#'\n#' @param bca.obj a ``bca'' object generated by \"bca\"\n#' @param expr an expression matrix\n#' @param mod the mode for extract the regulated patients and genes. It can be \"max.genes\" or \"max.patients\"\n#'\n#' @author Guofeng Meng\n#' @references\n#'\n#' @import parallel\n#' @import Rcpp\n#'\n#'\n#' @details Use a cpp program to do bi-clustering analysis to predict the genes and patients regulated by regulators\n#'\n#' @return a list\n#'\n#' @examples\n#' \\dontrun{\n#' output <- extract.modules(res, expr, \"max.genes\")\n#' }\n#' @export\n\nextract.modules<-function(bca.obj, expr, mod=\"max.gene\"){\n  if (!is(bca.obj, \"bca\") )\n    stop(\"Error: bca.obj: should be output of 'bca'\");\n  tfloc=bca.obj$para$tfloc;\n  min.ges=bca.obj$para$min.ges;\n  patients=bca.obj$para$patients;\n  genes=bca.obj$para$genes;\n  res=mclapply(tfloc, function(tf){\n\t  pas<-bca.obj[[as.character(tf)]][[\"pas\"]]\n\t  nges<-bca.obj[[as.character(tf)]][[\"nges\"]]\n\t  brk=which(nges > min.ges)[1]\n\t  if(is.na(brk))\n\t      return(NULL);\n\t  if(mod == \"max.genes\")\n\t    brk=which.max(nges)\n\n\t  select.pas=patients[-1*pas[1:brk]]\n\t  tp=\"DR\";\n\t  if(length(select.pas) > 0.9* length(patients))\n\t     type=\"FR\"\n\t  rr=abs(apply(expr[, select.pas], 1, function(x) cor(x, expr[tf, select.pas], method=\"spearman\")))\n\t  select.ges=genes[rr > cutoff]\n\t  select.ges=select.ges[select.ges!=genes[tf]]\n\t  r1=sapply(select.ges, function(x) cor(expr[tf, select.pas], expr[x, select.pas], method=\"spearman\"))\n\t  r2=sapply(select.ges, function(x) cor(expr[tf, !patients %in%select.pas], expr[x, !patients %in%select.pas], method=\"spearman\"))\n\t  if(median(r2) > 0.7)\n\t\t  tp=\"FR\";\n\t  if(median(r2) < 0.4)\n\t\t  tp=\"MR\";\n\t  tmp=list(reg.genes=select.ges, reg.pas=select.pas, type=tp)\n\t  return(tmp)\n  }, mc.cores=cores)\n  names(res)<-genes[tfloc]\n  return(res);\n}\n\n\n.transform<-function(x){\n  res=list();\n  i=1;\n  tf=\"\";\n  pas=vector();\n  nges=vector();\n  rr=vector()\n  while(1){\n    tf=x[i];\n    i=i+1;\n    n.row=x[i];\n    i=i+1;\n    pas=x[i:(i+n.row-1)]  ;\n    i= i + n.row;\n    nges=x[i:(i+n.row-1)]  ;\n    i= i + n.row;\n    rr=x[i:(i+n.row-1)]  ;\n    i= i + n.row;\n    res[[as.character(tf)]]=list(pas=pas, nges=nges, r=rr)\n    if(i > length(x))\n      break();\n  }\n  if(i!=length(x)+1){\n    print(\"warning: the number is unequal!\");\n  }\n  return(res)\n}\n\n",
    "created" : 1504771469742.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3956441601",
    "id" : "D31A253A",
    "lastKnownWriteTime" : 1504773998,
    "last_content_update" : 1504773998057,
    "path" : "~/Desktop/bireg/R/bireg.R",
    "project_path" : "R/bireg.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}